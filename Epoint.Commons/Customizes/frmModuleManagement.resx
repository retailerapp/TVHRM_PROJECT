<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj0yLjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAACy
        CgAAAk1TRnQBSQFMAgEBAgEAAQUBAAEEAQABEAEAARABAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABEAMAAQEBAAEgBgABEGIAARcBAwECARoBLwEHAQQBNQFCAQ4BBwFKAVABEwEJAVkBUAETAQkBWQFC
        AQ4BBwFKAS8BBwEEATUBFwEDAQIBGpgAAQ8CAQESASoBAQEHAUMBNAEBARcBZwE1AQEBHgFvATEBAQEO
        AVoBHQEBAQIBKSgAAQsCAQEMAS4BBwEEATQBWwEdARMBawFzATYBLgGVAYYBWwFWAcUBkQGCAYEB7QGP
        AX8BfQHtAYMBVwFSAcUBcAEyASoBlQFaARsBEgFrAS4BBwEEATQBCwIBAQyMAAEEAgEBBAEkAQEBBAE2
        ATQBAQEmAZcBHAEBAW4B2AEUAQEBiQHmAScBAQFIAcEBNAEBAQoBZgENAgEBDwECAwEcAAELAgEBDAE2
        AQoBBQE9AWkBKwElAYEBnAF9AXcB2QHcAdEByAH/AfEB6AHhAf8B+wH2AfIB/wH6AfMB7gH/Ae0B4AHW
        Af8B0gHDAbgB/wGOAWwBZgHZAWQBJgEfAYEBNgEKAQUBPQELAgEBDIgAAQ0CAQEQATUBAQETAXABIwEB
        AWIBywEGAQEBtwH5AgEByAH/AREBAQGQAekBMQEBASkBowEmAQEBAgE7AQMCAQECHAABLgEHAQQBNAFr
        AS4BJwGBAbsBqgGjAfMB9AHuAegC/wL+Af8B+wH0Ae8B/wH3AesB4QH/AfYB6gHgAf8B+gHzAe0B/wH+
        AfwB+gH/Ae4B5AHbAf8BogGOAYQB8wFkAScBIAGBAS4BBwEEATSIAAEzAQEBDQFgASEBAQFvAc8BCwEB
        AcQB8gECAQEB3AH+AgEB3gH/AQUBAQHYAfoBEgEBAZ8B6AEyAQEBJQGeASEBAQECATAYAAEXAQMBAgEa
        AV0BHgEVAWsBrQGOAYoB2QH3AfEB7QX/AfYB6AHdAf8B9gHoAd0B/wH1AecB3AH/AfUB5gHbAf8B9QHl
        AdoB/wH0AeUB2AL/Av4B/wHvAeQB3AH/AZEBcAFqAdkBWgEcARMBawEXAQMBAgEahAABLQEBAUQBtAEI
        AQEBrgH3AgEB0AH/AgEBygH/AgIBxwH/AgEB0QH/AgEBywH/ARsBAQFmAdsBNQEBAQ0BcxgAAS8BBwEE
        ATUBfwFCAToBlQHsAeUB4QL/Av4B/wH3AesB4QH/AfYB6gHgAf8B9gHpAd8B/wH2AegB3QH/AfYB6AHd
        Af8B9QHnAdwB/wH1AeYB2wH/AfUB5QHaAf8B/gH8AfoB/wHWAckBvwH/AXIBNQEtAZUBLwEHAQQBNYQA
        AQ0BAQGKAe8CAwG4Af8CBgGxAf8CCQGqAf8CCwGpAf8CCAGuAf8CBAG9Af8BCQECAZgB9wEvAQEBJAGq
        GAABQgEOAQcBSgGlAXoBdAHFAfgB8wHvAf8B+wH2AfIB/wH3AewB4wH/AfcB7AHjAf8B0gGSAWAB/wHS
        AZEBXwH/AdIBkQFfAf8B0gGQAV0B/wH2AegB3QH/AfUB5wHcAf8B+gHzAe4B/wHvAeQB2wH/AYkBXgFZ
        AcUBQgEOAQcBSoQAAQoBAQGQAfMCCAGkAf8CFgGmAf8CIgGpAf8CJQGqAf8CHAGoAf8CDQGsAf8BCgED
        AY8B9wEsAQEBLQG3GAABUAETAQkBWQHFAbYBtAHtAf4B/QH7Af8B+QHxAesB/wH4Ae4B5QH/AfcB7QHk
        Af8BtAF8AU8B/wG0AXwBTwH/AbMBewFOAf8B0gGRAV8B/wH2AegB3QH/AfYB6AHdAf8B9wHrAeEB/wH6
        AfUB8QH/AZwBjQGLAe0BUAETAQkBWYQAASYBAgFaAcgBKgEkAaMB9wJeAcIB/wJtAcMB/wJsAcEB/wJp
        AcUB/wFBAUABvgH+AR8BBQFlAdsBNAEBAQwBaxgAAVABEwEJAVkBxgG2AbUB7QH+Af0B+wH/AfoB8gHs
        Af8B+QHvAegB/wH4Ae4B5QH/AbQBfAFPAf8BtAF8AU8B/wG0AXwBTwH/AdIBkgFgAf8B9gHqAeAB/wH2
        AekB3wH/AfcB7AHjAf8B/QH7AfkB/wGgAZABjwHtAVABEwEJAVmEAAE2AQEBHAFzAUQBIgFsAcwBjQGJ
        AcsB+gKsAd4B/wKtAd4B/wKiAeAB/wFcAVABpQHvATYBBAEnAZkBHwEBAQIBLBgAAUIBDgEHAUoBpwF8
        AXgBxQH6AfYB8wH/AfwB+AH0Af8B+QHvAegB/wH5Ae8B6AH/AbYBfQFPAf8BtgF9AU8B/wG0AXwBTwH/
        AdIBkgFgAf8B9wHsAeMB/wH3AesB4QH/AfsB9QHxAf8B9gHvAeoB/wGRAWYBYAHFAUIBDgEHAUqEAAEZ
        AQEBAwEhAUQBDwEpAYABiwFtAZIB1AG5AakBxQHqAcEBtAHOAe4BpgGTAbgB5QFeATMBWQG4AS0BAgEG
        AUoBBQIBAQUYAAEvAQcBBAE1AYEBRAE8AZUB8QHsAegF/wH5AfEB6wH/AfkB8AHpAf8B+QHvAegB/wH5
        Ae8B6AH/AfgB7wHmAf8B+AHuAeUB/wH3AewB4wH/AfcB7AHjBf8B5wHfAdgB/wF4ATsBMwGVAS8BBwEE
        ATWEAAEDAgEBAgESAQEBAgEWAUQBEAEhAXUBdwFJAV0BrQGJAWABdwG8AVsBKQE+AZsBLAEDAQcBRAEF
        AgEBBRwAARcBAwECARoBXgEgARYBawG7AZwBmQHZAfsB+AH3Bf8B+QHxAesB/wH5AfAB6QH/AfkB7wHo
        Af8B+QHvAegB/wH4Ae8B5gH/AfgB7gHlBf8B+QH2AfMB/wGrAYsBhwHZAV0BHgEVAWsBFwEDAQIBGoQA
        AQIDAQEGAgEBBgEXAQIBAwEdASMBBgEHASsBJwEHAQgBLwEfAQQBBQEnAQ4CAQERAQIDASAAAS4BBwEE
        ATQBcAEzASwBgQHUAcUBwQHzAfsB+AH3Bf8B/AH5AfYB/wH6AfMB7gH/AfoB8wHtAf8B/AH4AfQF/wH5
        AfYB8wH/AccBtwGzAfMBbQEwASkBgQEuAQcBBAE0yAABCwIBAQwBNgEKAQUBPQFwATMBLAGBAbsBnAGZ
        AdkB8QHsAegB/wH6AfYB8wH/Af4B/QH7Af8B/gH9AfsB/wH5AfUB8gH/Ae4B6QHlAf8BtAGUAZAB2QFu
        ATABKQGBATYBCgEFAT0BCwIBAQzMAAELAgEBDAEuAQcBBAE0AV4BIAEWAWsBggFFATwBlQGoAX0BeAHF
        AcgBuAG2Ae0BxwG3AbYB7QGmAXsBdQHFAYABQwE7AZUBXgEfARYBawEuAQcBBAE0AQsCAQEM2AABFwED
        AQIBGgEvAQcBBAE1AUIBDgEHAUoBUAETAQkBWQFQARMBCQFZAUIBDgEHAUoBLwEHAQQBNQEXAQMBAgEa
        kAABQgFNAT4HAAE+AwABKAMAAUADAAEQAwABAQEAAQEFAAGAFwAD/wEAAv8B8AEPBAABwAH/AcABAwQA
        AYABPwGAAQEEAAGAAT8BgAEBBAABgAE/BgABgAE/BgABgAE/BgABgAE/BgABgAE/BgABgAE/BgABgAE/
        BgABgAF/BgABgAF/AYABAQQAAv8BgAEBBAAC/wHAAQMEAAL/AfABDwQACw==
</value>
  </data>
</root>